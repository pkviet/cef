From d30fadc5df96e1fcfed0cbe204d21506c23bb34b Mon Sep 17 00:00:00 2001
From: pkv <pkv@obsproject.com>
Date: Sun, 11 Dec 2022 13:30:04 +0100
Subject: [PATCH] Revert "Cleanup OutputSurface methods"

This reverts commit 5746714f208c79e9755e62af101ebf1845e65abd.

# Conflicts:
#	components/viz/service/display/direct_renderer.cc
#	components/viz/service/display/output_surface.h
#	components/viz/service/display/skia_renderer.cc
---
 cc/test/pixel_test_output_surface.cc          | 27 ++++++++++-
 cc/test/pixel_test_output_surface.h           |  6 +++
 .../viz/service/display/direct_renderer.cc    | 37 ++++++++++++++-
 .../viz/service/display/direct_renderer.h     |  7 ++-
 .../viz/service/display/null_renderer.h       |  1 +
 .../viz/service/display/output_surface.cc     |  7 ++-
 .../viz/service/display/output_surface.h      | 45 ++++++++++++++++---
 .../display/overlay_processor_interface.h     |  7 ++-
 .../viz/service/display/skia_output_surface.h |  4 --
 .../display/skia_readback_pixeltest.cc        |  1 -
 .../viz/service/display/skia_renderer.cc      |  9 ++--
 .../viz/service/display/software_renderer.cc  |  1 +
 .../output_surface_unified.cc                 | 16 +++++++
 .../display_embedder/output_surface_unified.h |  6 +++
 .../skia_output_surface_impl.cc               | 29 ++++++++++++
 .../skia_output_surface_impl.h                |  6 +++
 .../software_output_surface.cc                | 33 ++++++++++++--
 .../software_output_surface.h                 |  6 +++
 components/viz/test/fake_output_surface.cc    | 18 ++++++++
 components/viz/test/fake_output_surface.h     |  6 +++
 .../viz/test/fake_skia_output_surface.cc      | 28 ++++++++++++
 .../viz/test/fake_skia_output_surface.h       |  6 +++
 .../synchronous_layer_tree_frame_sink.cc      |  6 +++
 23 files changed, 285 insertions(+), 27 deletions(-)

diff --git cc/test/pixel_test_output_surface.cc cc/test/pixel_test_output_surface.cc
index b82f90db7cc38..363c1af109e92 100644
--- cc/test/pixel_test_output_surface.cc
+++ cc/test/pixel_test_output_surface.cc
@@ -21,7 +21,9 @@ namespace cc {
 
 PixelTestOutputSurface::PixelTestOutputSurface(
     std::unique_ptr<viz::SoftwareOutputDevice> software_device)
-    : OutputSurface(std::move(software_device)) {}
+    : OutputSurface(std::move(software_device)) {
+  capabilities_.supports_stencil = true;
+}
 
 PixelTestOutputSurface::~PixelTestOutputSurface() = default;
 
@@ -33,10 +35,18 @@ void PixelTestOutputSurface::EnsureBackbuffer() {}
 
 void PixelTestOutputSurface::DiscardBackbuffer() {}
 
+void PixelTestOutputSurface::BindFramebuffer() {}
+
 void PixelTestOutputSurface::Reshape(const ReshapeParams& params) {
   software_device()->Resize(params.size, params.device_scale_factor);
 }
 
+bool PixelTestOutputSurface::HasExternalStencilTest() const {
+  return false;
+}
+
+void PixelTestOutputSurface::ApplyExternalStencil() {}
+
 void PixelTestOutputSurface::SwapBuffers(viz::OutputSurfaceFrame frame) {
   base::ThreadTaskRunnerHandle::Get()->PostTask(
       FROM_HERE, base::BindOnce(&PixelTestOutputSurface::SwapBuffersCallback,
@@ -56,6 +66,21 @@ bool PixelTestOutputSurface::IsDisplayedAsOverlayPlane() const {
   return false;
 }
 
+unsigned PixelTestOutputSurface::GetOverlayTextureId() const {
+  return 0;
+}
+
+uint32_t PixelTestOutputSurface::GetFramebufferCopyTextureFormat() {
+  // This format will work if the |context_provider| has an RGB or RGBA
+  // framebuffer. For now assume tests do not want/care about alpha in
+  // the root render pass.
+  return GL_RGB;
+}
+
+unsigned PixelTestOutputSurface::UpdateGpuFence() {
+  return 0;
+}
+
 void PixelTestOutputSurface::SetUpdateVSyncParametersCallback(
     viz::UpdateVSyncParametersCallback callback) {}
 
diff --git cc/test/pixel_test_output_surface.h cc/test/pixel_test_output_surface.h
index 6dc5f944e6234..ad908819f7843 100644
--- cc/test/pixel_test_output_surface.h
+++ cc/test/pixel_test_output_surface.h
@@ -24,9 +24,15 @@ class PixelTestOutputSurface : public viz::OutputSurface {
   void BindToClient(viz::OutputSurfaceClient* client) override;
   void EnsureBackbuffer() override;
   void DiscardBackbuffer() override;
+  void BindFramebuffer() override;
   void Reshape(const ReshapeParams& params) override;
+  bool HasExternalStencilTest() const override;
+  void ApplyExternalStencil() override;
   void SwapBuffers(viz::OutputSurfaceFrame frame) override;
   bool IsDisplayedAsOverlayPlane() const override;
+  unsigned GetOverlayTextureId() const override;
+  uint32_t GetFramebufferCopyTextureFormat() override;
+  unsigned UpdateGpuFence() override;
   void SetUpdateVSyncParametersCallback(
       viz::UpdateVSyncParametersCallback callback) override;
   void SetDisplayTransformHint(gfx::OverlayTransform transform) override {}
diff --git components/viz/service/display/direct_renderer.cc components/viz/service/display/direct_renderer.cc
index b71d40d10a22d..4830d0ab4f48f 100644
--- components/viz/service/display/direct_renderer.cc
+++ components/viz/service/display/direct_renderer.cc
@@ -236,6 +236,18 @@ void DirectRenderer::DrawFrame(
   auto* root_render_pass = render_passes_in_draw_order->back().get();
   DCHECK(root_render_pass);
 
+  bool overdraw_feedback = debug_settings_->show_overdraw_feedback;
+  if (overdraw_feedback && !output_surface_->capabilities().supports_stencil) {
+#if DCHECK_IS_ON()
+    DLOG_IF(WARNING, !overdraw_feedback_support_missing_logged_once_)
+        << "Overdraw feedback enabled on platform without support.";
+    overdraw_feedback_support_missing_logged_once_ = true;
+#endif
+    overdraw_feedback = false;
+  }
+  base::AutoReset<bool> auto_reset_overdraw_feedback(&overdraw_feedback_,
+                                                     overdraw_feedback);
+
   current_frame_valid_ = true;
   current_frame_ = DrawingFrame();
   current_frame()->render_passes_in_draw_order = render_passes_in_draw_order;
@@ -363,6 +375,7 @@ void DirectRenderer::DrawFrame(
   // can leave the window at the wrong size if we never draw and the proper
   // viewport size is never set.
   skipped_render_pass_ids_.clear();
+  bool use_stencil = overdraw_feedback_;
   bool needs_full_frame_redraw = false;
   auto display_transform = output_surface_->GetDisplayTransform();
   OutputSurface::ReshapeParams reshape_params;
@@ -373,6 +386,7 @@ void DirectRenderer::DrawFrame(
   reshape_params.format = frame_buffer_format;
   reshape_params.alpha_type =
       frame_has_alpha ? kPremul_SkAlphaType : kOpaque_SkAlphaType;
+  reshape_params.use_stencil = use_stencil;
   if (next_frame_needs_full_frame_redraw_ ||
       reshape_params != reshape_params_ ||
       display_transform != reshape_display_transform_) {
@@ -416,6 +430,16 @@ void DirectRenderer::DrawFrame(
   if (!skip_drawing_root_render_pass)
     DrawRenderPassAndExecuteCopyRequests(root_render_pass);
 
+  // Use a fence to synchronize display of the main fb used by the output
+  // surface. Note that gpu_fence_id may have the special value 0 ("no fence")
+  // if fences are not supported. In that case synchronization will happen
+  // through other means on the service side.
+  // TODO(afrantzis): Consider using per-overlay fences instead of the one
+  // associated with the output surface when possible.
+  if (current_frame()->output_surface_plane)
+    current_frame()->output_surface_plane->gpu_fence_id =
+        output_surface_->UpdateGpuFence();
+
   if (overlay_processor_)
     overlay_processor_->TakeOverlayCandidates(&current_frame()->overlay_list);
 
@@ -672,8 +696,16 @@ void DirectRenderer::DrawRenderPass(const AggregatedRenderPass* render_pass) {
   const bool render_pass_requires_scissor =
       render_pass_is_clipped || (supports_dc_layers && is_root_render_pass);
 
+  const bool has_external_stencil_test =
+      is_root_render_pass && output_surface_->HasExternalStencilTest();
   const bool should_clear_surface =
-      !is_root_render_pass || settings_->should_clear_root_render_pass;
+      !has_external_stencil_test &&
+      (!is_root_render_pass || settings_->should_clear_root_render_pass);
+
+  // If |has_external_stencil_test| we can't discard or clear. Make sure we
+  // don't need to.
+  DCHECK(!has_external_stencil_test ||
+         !current_frame()->current_render_pass->has_transparent_background);
 
   SurfaceInitializationMode mode;
   if (should_clear_surface && render_pass_requires_scissor) {
@@ -744,6 +776,9 @@ void DirectRenderer::DrawRenderPass(const AggregatedRenderPass* render_pass) {
                 render_pass_requires_scissor);
   FinishDrawingQuadList();
 
+  if (is_root_render_pass && overdraw_feedback_)
+    FlushOverdrawFeedback(render_pass_scissor_in_draw_space);
+
   if (render_pass->generate_mipmap)
     GenerateMipmap();
 }
diff --git components/viz/service/display/direct_renderer.h components/viz/service/display/direct_renderer.h
index 1997a75c59549..c9caac83c3a3f 100644
--- components/viz/service/display/direct_renderer.h
+++ components/viz/service/display/direct_renderer.h
@@ -282,6 +282,7 @@ class VIZ_SERVICE_EXPORT DirectRenderer {
   virtual void DoDrawQuad(const DrawQuad* quad,
                           const gfx::QuadF* clip_region) = 0;
   virtual void BeginDrawingFrame() = 0;
+  virtual void FlushOverdrawFeedback(const gfx::Rect& output_rect) {}
   virtual void FinishDrawingFrame() = 0;
   // If a pass contains a single tile draw quad and can be drawn without
   // a render pass (e.g. applying a filter directly to the tile quad)
@@ -341,6 +342,8 @@ class VIZ_SERVICE_EXPORT DirectRenderer {
   bool allow_empty_swap_ = false;
   // Whether partial swap can be used.
   bool use_partial_swap_ = false;
+  // Whether overdraw feedback is enabled and can be used.
+  bool overdraw_feedback_ = false;
 
   // A map from RenderPass id to the single quad present in and replacing the
   // RenderPass. The DrawQuads are owned by their RenderPasses, which outlive
@@ -405,7 +408,9 @@ class VIZ_SERVICE_EXPORT DirectRenderer {
   virtual void DrawDelegatedInkTrail();
 
   bool initialized_ = false;
-
+#if DCHECK_IS_ON()
+  bool overdraw_feedback_support_missing_logged_once_ = false;
+#endif
   gfx::Rect last_root_render_pass_scissor_rect_;
   gfx::Size enlarge_pass_texture_amount_;
 
diff --git components/viz/service/display/null_renderer.h components/viz/service/display/null_renderer.h
index 2166f2239765c..762525154c251 100644
--- components/viz/service/display/null_renderer.h
+++ components/viz/service/display/null_renderer.h
@@ -45,6 +45,7 @@ class VIZ_SERVICE_EXPORT NullRenderer : public DirectRenderer {
   void DoDrawQuad(const DrawQuad* quad,
                   const gfx::QuadF* clip_region) override {}
   void BeginDrawingFrame() override;
+  void FlushOverdrawFeedback(const gfx::Rect& output_rect) override {}
   void FinishDrawingFrame() override {}
   bool FlippedFramebuffer() const override;
   void EnsureScissorTestEnabled() override {}
diff --git components/viz/service/display/output_surface.cc components/viz/service/display/output_surface.cc
index ccafd75cf741e..d72a7d7f86b92 100644
--- components/viz/service/display/output_surface.cc
+++ components/viz/service/display/output_surface.cc
@@ -30,9 +30,14 @@ OutputSurface::Capabilities& OutputSurface::Capabilities::operator=(
 
 OutputSurface::OutputSurface(Type type) : type_(type) {}
 
+OutputSurface::OutputSurface(scoped_refptr<ContextProvider> context_provider)
+    : context_provider_(std::move(context_provider)), type_(Type::kOpenGL) {
+  DCHECK(context_provider_);
+}
+
 OutputSurface::OutputSurface(
     std::unique_ptr<SoftwareOutputDevice> software_device)
-    : type_(Type::kSoftware), software_device_(std::move(software_device)) {
+    : software_device_(std::move(software_device)), type_(Type::kSoftware) {
   DCHECK(software_device_);
 }
 
diff --git components/viz/service/display/output_surface.h components/viz/service/display/output_surface.h
index 3b6f3308154fc..17643c6ec2234 100644
--- components/viz/service/display/output_surface.h
+++ components/viz/service/display/output_surface.h
@@ -12,6 +12,7 @@
 #include "base/memory/ref_counted.h"
 #include "base/threading/thread_checker.h"
 #include "components/viz/common/display/update_vsync_parameters_callback.h"
+#include "components/viz/common/gpu/context_provider.h"
 #include "components/viz/common/gpu/gpu_vsync_callback.h"
 #include "components/viz/common/resources/resource_format.h"
 #include "components/viz/common/resources/returned_resource.h"
@@ -25,7 +26,6 @@
 #include "mojo/public/cpp/bindings/pending_receiver.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 #include "third_party/skia/include/core/SkM44.h"
-#include "ui/gfx/buffer_types.h"
 #include "ui/gfx/color_space.h"
 #include "ui/gfx/overlay_transform.h"
 #include "ui/gfx/surface_origin.h"
@@ -77,6 +77,10 @@ class VIZ_SERVICE_EXPORT OutputSurface {
     bool uses_default_gl_framebuffer = true;
     // Where (0,0) is on this OutputSurface.
     gfx::SurfaceOrigin output_surface_origin = gfx::SurfaceOrigin::kBottomLeft;
+    // Whether this OutputSurface supports stencil operations or not.
+    // Note: HasExternalStencilTest() must return false when an output surface
+    // has been configured for stencil usage.
+    bool supports_stencil = false;
     // Whether this OutputSurface supports post sub buffer or not.
     bool supports_post_sub_buffer = false;
     // Whether this OutputSurface supports commit overlay planes.
@@ -154,6 +158,8 @@ class VIZ_SERVICE_EXPORT OutputSurface {
 
   // Constructor for skia-based compositing.
   explicit OutputSurface(Type type);
+  // Constructor for GL-based compositing.
+  explicit OutputSurface(scoped_refptr<ContextProvider> context_provider);
   // Constructor for software compositing.
   explicit OutputSurface(std::unique_ptr<SoftwareOutputDevice> software_device);
 
@@ -165,9 +171,11 @@ class VIZ_SERVICE_EXPORT OutputSurface {
   const Capabilities& capabilities() const { return capabilities_; }
   Type type() const { return type_; }
 
-  // Obtain the software device associated with this output surface. This will
-  // return non-null for a software output surface and null for skia output
-  // surface.
+  // Obtain the 3d context or the software device associated with this output
+  // surface. Either of these may return a null pointer, but not both.
+  // In the event of a lost context, the entire output surface should be
+  // recreated.
+  ContextProvider* context_provider() const { return context_provider_.get(); }
   SoftwareOutputDevice* software_device() const {
     return software_device_.get();
   }
@@ -188,6 +196,10 @@ class VIZ_SERVICE_EXPORT OutputSurface {
   virtual void EnsureBackbuffer() = 0;
   virtual void DiscardBackbuffer() = 0;
 
+  // Bind the default framebuffer for drawing to, only valid for GL backed
+  // OutputSurfaces.
+  virtual void BindFramebuffer() = 0;
+
   // Marks that the given rectangle will be drawn to on the default, bound
   // framebuffer. The contents of the framebuffer are undefined after this
   // command and must be filled in completely before a swap happens. Drawing
@@ -205,6 +217,9 @@ class VIZ_SERVICE_EXPORT OutputSurface {
   // Returns true if a main image overlay plane should be scheduled.
   virtual bool IsDisplayedAsOverlayPlane() const = 0;
 
+  // Get the texture for the main image's overlay.
+  virtual unsigned GetOverlayTextureId() const = 0;
+
   // Returns the |mailbox| corresponding to the main image's overlay.
   virtual gpu::Mailbox GetOverlayMailbox() const;
 
@@ -217,13 +232,15 @@ class VIZ_SERVICE_EXPORT OutputSurface {
     // TODO(sunnyps): Change to SkColorType.
     gfx::BufferFormat format = gfx::BufferFormat::RGBA_8888;
     SkAlphaType alpha_type = kPremul_SkAlphaType;
+    bool use_stencil = false;
 
     bool operator==(const ReshapeParams& other) const {
       return size == other.size &&
              device_scale_factor == other.device_scale_factor &&
              color_space == other.color_space &&
              sdr_white_level == other.sdr_white_level &&
-             format == other.format && alpha_type == other.alpha_type;
+             format == other.format && use_stencil == other.use_stencil &&
+             alpha_type == other.alpha_type;
     }
     bool operator!=(const ReshapeParams& other) const {
       return !(*this == other);
@@ -231,6 +248,13 @@ class VIZ_SERVICE_EXPORT OutputSurface {
   };
   virtual void Reshape(const ReshapeParams& params) = 0;
 
+  virtual bool HasExternalStencilTest() const = 0;
+  virtual void ApplyExternalStencil() = 0;
+
+  // Gives the GL internal format that should be used for calling CopyTexImage2D
+  // when the framebuffer is bound via BindFramebuffer().
+  virtual uint32_t GetFramebufferCopyTextureFormat() = 0;
+
   // Swaps the current backbuffer to the screen. For successful swaps, the
   // implementation must call OutputSurfaceClient::DidReceiveSwapBuffersAck()
   // after returning from this method in order to unblock the next frame.
@@ -246,6 +270,14 @@ class VIZ_SERVICE_EXPORT OutputSurface {
   // TODO(dcastagna): Consider making the following pure virtual.
   virtual gfx::Rect GetCurrentFramebufferDamage() const;
 
+  // Updates the GpuFence associated with this surface. The id of a newly
+  // created GpuFence is returned, or if an error occurs, or fences are not
+  // supported, the special id of 0 (meaning "no fence") is returned.  In all
+  // cases, any previously associated fence is destroyed. The returned fence id
+  // corresponds to the GL id used by the CHROMIUM_gpu_fence GL extension and
+  // can be passed directly to any related extension functions.
+  virtual unsigned UpdateGpuFence() = 0;
+
   // Sets callback to receive updated vsync parameters after SwapBuffers() if
   // supported.
   virtual void SetUpdateVSyncParametersCallback(
@@ -304,10 +336,11 @@ class VIZ_SERVICE_EXPORT OutputSurface {
 
  protected:
   struct OutputSurface::Capabilities capabilities_;
+  scoped_refptr<ContextProvider> context_provider_;
+  std::unique_ptr<SoftwareOutputDevice> software_device_;
 
  private:
   const Type type_;
-  std::unique_ptr<SoftwareOutputDevice> software_device_;
   SkM44 color_matrix_;
 };
 
diff --git components/viz/service/display/overlay_processor_interface.h components/viz/service/display/overlay_processor_interface.h
index b363c2fc55757..85f620a7d76d1 100644
--- components/viz/service/display/overlay_processor_interface.h
+++ components/viz/service/display/overlay_processor_interface.h
@@ -33,10 +33,6 @@ namespace cc {
 class DisplayResourceProvider;
 }
 
-namespace gpu {
-class SharedImageInterface;
-}
-
 namespace viz {
 struct DebugRendererSettings;
 class OutputSurface;
@@ -99,6 +95,9 @@ class VIZ_SERVICE_EXPORT OverlayProcessorInterface {
     // Opacity of the overlay independent of buffer alpha. When rendered:
     // src-alpha = |opacity| * buffer-component-alpha.
     float opacity;
+    // TODO(weiliangc): Should be replaced by SharedImage mailbox.
+    // Gpu fence to wait for before overlay is ready for display.
+    unsigned gpu_fence_id;
     // Mailbox corresponding to the buffer backing the primary plane.
     gpu::Mailbox mailbox;
     // Hints for overlay prioritization.
diff --git components/viz/service/display/skia_output_surface.h components/viz/service/display/skia_output_surface.h
index 5ead658118c92..14fb920fedc63 100644
--- components/viz/service/display/skia_output_surface.h
+++ components/viz/service/display/skia_output_surface.h
@@ -34,10 +34,6 @@ namespace gfx {
 class ColorSpace;
 }  // namespace gfx
 
-namespace gpu {
-class SharedImageInterface;
-}
-
 namespace viz {
 
 class OverlayCandidate;
diff --git components/viz/service/display/skia_readback_pixeltest.cc components/viz/service/display/skia_readback_pixeltest.cc
index 6444390043606..abc9216511f02 100644
--- components/viz/service/display/skia_readback_pixeltest.cc
+++ components/viz/service/display/skia_readback_pixeltest.cc
@@ -21,7 +21,6 @@
 #include "components/viz/common/frame_sinks/copy_output_request.h"
 #include "components/viz/common/frame_sinks/copy_output_result.h"
 #include "components/viz/common/frame_sinks/copy_output_util.h"
-#include "components/viz/common/gpu/context_provider.h"
 #include "components/viz/service/display_embedder/skia_output_surface_impl.h"
 #include "components/viz/service/gl/gpu_service_impl.h"
 #include "components/viz/test/buildflags.h"
diff --git components/viz/service/display/skia_renderer.cc components/viz/service/display/skia_renderer.cc
index 958d63dfb64d8..0fb8259ff290a 100644
--- components/viz/service/display/skia_renderer.cc
+++ components/viz/service/display/skia_renderer.cc
@@ -1081,10 +1081,11 @@ void SkiaRenderer::EnsureScissorTestDisabled() {
 }
 
 void SkiaRenderer::BindFramebufferToOutputSurface() {
-  current_canvas_ = skia_output_surface_->BeginPaintCurrentFrame();
-  if (debug_settings_->show_overdraw_feedback) {
-    current_canvas_ = skia_output_surface_->RecordOverdrawForCurrentPaint();
-  }
+  DCHECK(!output_surface_->HasExternalStencilTest());
+
+  root_canvas_ = skia_output_surface_->BeginPaintCurrentFrame();
+  current_canvas_ = root_canvas_;
+  current_surface_ = root_surface_.get();
 }
 
 void SkiaRenderer::BindFramebufferToTexture(
diff --git components/viz/service/display/software_renderer.cc components/viz/service/display/software_renderer.cc
index 623042e049b2e..d8c59313cc9e3 100644
--- components/viz/service/display/software_renderer.cc
+++ components/viz/service/display/software_renderer.cc
@@ -136,6 +136,7 @@ void SoftwareRenderer::EnsureScissorTestDisabled() {
 }
 
 void SoftwareRenderer::BindFramebufferToOutputSurface() {
+  DCHECK(!output_surface_->HasExternalStencilTest());
   DCHECK(!root_canvas_);
 
   root_canvas_ = output_device_->BeginPaint(current_frame()->root_damage_rect);
diff --git components/viz/service/display_embedder/output_surface_unified.cc components/viz/service/display_embedder/output_surface_unified.cc
index 5285f8068a22a..e25a01f8bc142 100644
--- components/viz/service/display_embedder/output_surface_unified.cc
+++ components/viz/service/display_embedder/output_surface_unified.cc
@@ -29,6 +29,22 @@ bool OutputSurfaceUnified::IsDisplayedAsOverlayPlane() const {
   return false;
 }
 
+unsigned OutputSurfaceUnified::GetOverlayTextureId() const {
+  return 0;
+}
+
+bool OutputSurfaceUnified::HasExternalStencilTest() const {
+  return false;
+}
+
+uint32_t OutputSurfaceUnified::GetFramebufferCopyTextureFormat() {
+  return 0;
+}
+
+unsigned OutputSurfaceUnified::UpdateGpuFence() {
+  return 0;
+}
+
 gfx::OverlayTransform OutputSurfaceUnified::GetDisplayTransform() {
   return gfx::OVERLAY_TRANSFORM_NONE;
 }
diff --git components/viz/service/display_embedder/output_surface_unified.h components/viz/service/display_embedder/output_surface_unified.h
index 8f1c66ef0d8cc..784fab052bab1 100644
--- components/viz/service/display_embedder/output_surface_unified.h
+++ components/viz/service/display_embedder/output_surface_unified.h
@@ -34,9 +34,15 @@ class OutputSurfaceUnified : public OutputSurface {
   void BindToClient(OutputSurfaceClient* client) override {}
   void EnsureBackbuffer() override {}
   void DiscardBackbuffer() override {}
+  void BindFramebuffer() override {}
   void Reshape(const ReshapeParams& params) override {}
   void SwapBuffers(OutputSurfaceFrame frame) override;
   bool IsDisplayedAsOverlayPlane() const override;
+  unsigned GetOverlayTextureId() const override;
+  bool HasExternalStencilTest() const override;
+  void ApplyExternalStencil() override {}
+  uint32_t GetFramebufferCopyTextureFormat() override;
+  unsigned UpdateGpuFence() override;
   void SetUpdateVSyncParametersCallback(
       UpdateVSyncParametersCallback callback) override {}
   void SetDisplayTransformHint(gfx::OverlayTransform transform) override {}
diff --git components/viz/service/display_embedder/skia_output_surface_impl.cc components/viz/service/display_embedder/skia_output_surface_impl.cc
index 162934a0c3c32..5c87bfc594a13 100644
--- components/viz/service/display_embedder/skia_output_surface_impl.cc
+++ components/viz/service/display_embedder/skia_output_surface_impl.cc
@@ -237,6 +237,10 @@ void SkiaOutputSurfaceImpl::BindToClient(OutputSurfaceClient* client) {
   client_ = client;
 }
 
+void SkiaOutputSurfaceImpl::BindFramebuffer() {
+  // TODO(penghuang): remove this method when GLRenderer is removed.
+}
+
 void SkiaOutputSurfaceImpl::SetDrawRectangle(const gfx::Rect& draw_rectangle) {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
   DCHECK(capabilities().supports_dc_layers);
@@ -1199,15 +1203,40 @@ GrBackendFormat SkiaOutputSurfaceImpl::GetGrBackendFormatForTexture(
   return GrBackendFormat();
 }
 
+uint32_t SkiaOutputSurfaceImpl::GetFramebufferCopyTextureFormat() {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+
+  return GL_RGB;
+}
+
 bool SkiaOutputSurfaceImpl::IsDisplayedAsOverlayPlane() const {
   return is_displayed_as_overlay_;
 }
 
+unsigned SkiaOutputSurfaceImpl::GetOverlayTextureId() const {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+  return 0;
+}
+
 gpu::Mailbox SkiaOutputSurfaceImpl::GetOverlayMailbox() const {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
   return last_swapped_mailbox_;
 }
 
+bool SkiaOutputSurfaceImpl::HasExternalStencilTest() const {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+
+  return false;
+}
+
+void SkiaOutputSurfaceImpl::ApplyExternalStencil() {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+}
+
+unsigned SkiaOutputSurfaceImpl::UpdateGpuFence() {
+  return 0;
+}
+
 void SkiaOutputSurfaceImpl::SetNeedsSwapSizeNotifications(
     bool needs_swap_size_notifications) {
   needs_swap_size_notifications_ = needs_swap_size_notifications;
diff --git components/viz/service/display_embedder/skia_output_surface_impl.h components/viz/service/display_embedder/skia_output_surface_impl.h
index 1616b00e12a27..c835257df40a5 100644
--- components/viz/service/display_embedder/skia_output_surface_impl.h
+++ components/viz/service/display_embedder/skia_output_surface_impl.h
@@ -77,6 +77,7 @@ class VIZ_SERVICE_EXPORT SkiaOutputSurfaceImpl : public SkiaOutputSurface {
   // OutputSurface implementation:
   gpu::SurfaceHandle GetSurfaceHandle() const override;
   void BindToClient(OutputSurfaceClient* client) override;
+  void BindFramebuffer() override;
   void SetDrawRectangle(const gfx::Rect& draw_rectangle) override;
   void SetEnableDCLayers(bool enable) override;
   void EnsureBackbuffer() override;
@@ -89,8 +90,13 @@ class VIZ_SERVICE_EXPORT SkiaOutputSurfaceImpl : public SkiaOutputSurface {
   void SetDisplayTransformHint(gfx::OverlayTransform transform) override;
   gfx::OverlayTransform GetDisplayTransform() override;
   void SwapBuffers(OutputSurfaceFrame frame) override;
+  uint32_t GetFramebufferCopyTextureFormat() override;
   bool IsDisplayedAsOverlayPlane() const override;
+  unsigned GetOverlayTextureId() const override;
   gpu::Mailbox GetOverlayMailbox() const override;
+  bool HasExternalStencilTest() const override;
+  void ApplyExternalStencil() override;
+  unsigned UpdateGpuFence() override;
   void SetNeedsSwapSizeNotifications(
       bool needs_swap_size_notifications) override;
   base::ScopedClosureRunner GetCacheBackBufferCb() override;
diff --git components/viz/service/display_embedder/software_output_surface.cc components/viz/service/display_embedder/software_output_surface.cc
index fd7f07a1a1d7e..fdf8b335b7297 100644
--- components/viz/service/display_embedder/software_output_surface.cc
+++ components/viz/service/display_embedder/software_output_surface.cc
@@ -24,12 +24,12 @@
 namespace viz {
 
 SoftwareOutputSurface::SoftwareOutputSurface(
-    std::unique_ptr<SoftwareOutputDevice> device)
-    : OutputSurface(std::move(device)) {
+    std::unique_ptr<SoftwareOutputDevice> software_device)
+    : OutputSurface(std::move(software_device)) {
   capabilities_.pending_swap_params.max_pending_swaps =
-      software_device()->MaxFramesPending();
+      software_device_->MaxFramesPending();
   capabilities_.resize_based_on_root_surface =
-      software_device()->SupportsOverridePlatformSize();
+      software_device_->SupportsOverridePlatformSize();
 }
 
 SoftwareOutputSurface::~SoftwareOutputSurface() = default;
@@ -48,6 +48,11 @@ void SoftwareOutputSurface::DiscardBackbuffer() {
   software_device()->DiscardBackbuffer();
 }
 
+void SoftwareOutputSurface::BindFramebuffer() {
+  // Not used for software surfaces.
+  NOTREACHED();
+}
+
 void SoftwareOutputSurface::Reshape(const ReshapeParams& params) {
   software_device()->Resize(params.size, params.device_scale_factor);
 }
@@ -80,6 +85,22 @@ bool SoftwareOutputSurface::IsDisplayedAsOverlayPlane() const {
   return false;
 }
 
+unsigned SoftwareOutputSurface::GetOverlayTextureId() const {
+  return 0;
+}
+
+bool SoftwareOutputSurface::HasExternalStencilTest() const {
+  return false;
+}
+
+void SoftwareOutputSurface::ApplyExternalStencil() {}
+
+uint32_t SoftwareOutputSurface::GetFramebufferCopyTextureFormat() {
+  // Not used for software surfaces.
+  NOTREACHED();
+  return 0;
+}
+
 void SoftwareOutputSurface::SwapBuffersCallback(base::TimeTicks swap_time,
                                                 const gfx::Size& pixel_size) {
   latency_tracker_.OnGpuSwapBuffersCompleted(
@@ -109,6 +130,10 @@ void SoftwareOutputSurface::UpdateVSyncParameters(base::TimeTicks timebase,
   update_vsync_parameters_callback_.Run(timebase, interval);
 }
 
+unsigned SoftwareOutputSurface::UpdateGpuFence() {
+  return 0;
+}
+
 void SoftwareOutputSurface::SetUpdateVSyncParametersCallback(
     UpdateVSyncParametersCallback callback) {
   update_vsync_parameters_callback_ = std::move(callback);
diff --git components/viz/service/display_embedder/software_output_surface.h components/viz/service/display_embedder/software_output_surface.h
index a5b070b3674a5..abef8867a7973 100644
--- components/viz/service/display_embedder/software_output_surface.h
+++ components/viz/service/display_embedder/software_output_surface.h
@@ -38,9 +38,15 @@ class VIZ_SERVICE_EXPORT SoftwareOutputSurface : public OutputSurface {
   void BindToClient(OutputSurfaceClient* client) override;
   void EnsureBackbuffer() override;
   void DiscardBackbuffer() override;
+  void BindFramebuffer() override;
   void Reshape(const ReshapeParams& params) override;
   void SwapBuffers(OutputSurfaceFrame frame) override;
   bool IsDisplayedAsOverlayPlane() const override;
+  unsigned GetOverlayTextureId() const override;
+  bool HasExternalStencilTest() const override;
+  void ApplyExternalStencil() override;
+  uint32_t GetFramebufferCopyTextureFormat() override;
+  unsigned UpdateGpuFence() override;
   void SetUpdateVSyncParametersCallback(
       UpdateVSyncParametersCallback callback) override;
   void SetDisplayTransformHint(gfx::OverlayTransform transform) override {}
diff --git components/viz/test/fake_output_surface.cc components/viz/test/fake_output_surface.cc
index 461098820d563..2660cec20780e 100644
--- components/viz/test/fake_output_surface.cc
+++ components/viz/test/fake_output_surface.cc
@@ -47,6 +47,8 @@ void FakeSoftwareOutputSurface::SwapBuffersAck() {
   client_->DidReceivePresentationFeedback({now, base::TimeDelta(), 0});
 }
 
+void FakeSoftwareOutputSurface::BindFramebuffer() {}
+
 void FakeSoftwareOutputSurface::SetDrawRectangle(const gfx::Rect& rect) {
   NOTREACHED();
 }
@@ -55,16 +57,32 @@ void FakeSoftwareOutputSurface::SetEnableDCLayers(bool enabled) {
   NOTREACHED();
 }
 
+uint32_t FakeSoftwareOutputSurface::GetFramebufferCopyTextureFormat() {
+  return GL_RGB;
+}
+
 void FakeSoftwareOutputSurface::BindToClient(OutputSurfaceClient* client) {
   DCHECK(client);
   DCHECK(!client_);
   client_ = client;
 }
 
+bool FakeSoftwareOutputSurface::HasExternalStencilTest() const {
+  return false;
+}
+
 bool FakeSoftwareOutputSurface::IsDisplayedAsOverlayPlane() const {
   return false;
 }
 
+unsigned FakeSoftwareOutputSurface::GetOverlayTextureId() const {
+  return 0;
+}
+
+unsigned FakeSoftwareOutputSurface::UpdateGpuFence() {
+  return 0;
+}
+
 void FakeSoftwareOutputSurface::SetUpdateVSyncParametersCallback(
     UpdateVSyncParametersCallback callback) {}
 
diff --git components/viz/test/fake_output_surface.h components/viz/test/fake_output_surface.h
index 65723ffdf8e7f..fefb09df60209 100644
--- components/viz/test/fake_output_surface.h
+++ components/viz/test/fake_output_surface.h
@@ -37,11 +37,17 @@ class FakeSoftwareOutputSurface : public OutputSurface {
   void BindToClient(OutputSurfaceClient* client) override;
   void EnsureBackbuffer() override {}
   void DiscardBackbuffer() override {}
+  void BindFramebuffer() override;
   void SetDrawRectangle(const gfx::Rect& rect) override;
   void SetEnableDCLayers(bool enabled) override;
   void Reshape(const ReshapeParams& params) override;
   void SwapBuffers(OutputSurfaceFrame frame) override;
+  uint32_t GetFramebufferCopyTextureFormat() override;
+  bool HasExternalStencilTest() const override;
+  void ApplyExternalStencil() override {}
   bool IsDisplayedAsOverlayPlane() const override;
+  unsigned GetOverlayTextureId() const override;
+  unsigned UpdateGpuFence() override;
   void SetUpdateVSyncParametersCallback(
       UpdateVSyncParametersCallback callback) override;
   void SetDisplayTransformHint(gfx::OverlayTransform transform) override;
diff --git components/viz/test/fake_skia_output_surface.cc components/viz/test/fake_skia_output_surface.cc
index 6a9752a6d343f..1ec209deec4bb 100644
--- components/viz/test/fake_skia_output_surface.cc
+++ components/viz/test/fake_skia_output_surface.cc
@@ -57,6 +57,10 @@ void FakeSkiaOutputSurface::DiscardBackbuffer() {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
 }
 
+void FakeSkiaOutputSurface::BindFramebuffer() {
+  // TODO(penghuang): remove this method when GLRenderer is removed.
+}
+
 void FakeSkiaOutputSurface::Reshape(const ReshapeParams& params) {
   auto& sk_surface = sk_surfaces_[AggregatedRenderPassId{0}];
   SkColorType color_type = kRGBA_8888_SkColorType;
@@ -84,10 +88,34 @@ void FakeSkiaOutputSurface::ScheduleOutputSurfaceAsOverlay(
   NOTIMPLEMENTED();
 }
 
+uint32_t FakeSkiaOutputSurface::GetFramebufferCopyTextureFormat() {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+  return GL_RGB;
+}
+
 bool FakeSkiaOutputSurface::IsDisplayedAsOverlayPlane() const {
   return false;
 }
 
+unsigned FakeSkiaOutputSurface::GetOverlayTextureId() const {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+  return 0;
+}
+
+bool FakeSkiaOutputSurface::HasExternalStencilTest() const {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+  return false;
+}
+
+void FakeSkiaOutputSurface::ApplyExternalStencil() {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+}
+
+unsigned FakeSkiaOutputSurface::UpdateGpuFence() {
+  NOTIMPLEMENTED();
+  return 0;
+}
+
 void FakeSkiaOutputSurface::SetNeedsSwapSizeNotifications(
     bool needs_swap_size_notifications) {
   NOTIMPLEMENTED();
diff --git components/viz/test/fake_skia_output_surface.h components/viz/test/fake_skia_output_surface.h
index 75008773442f1..68309a8f215c9 100644
--- components/viz/test/fake_skia_output_surface.h
+++ components/viz/test/fake_skia_output_surface.h
@@ -44,12 +44,18 @@ class FakeSkiaOutputSurface : public SkiaOutputSurface {
   void BindToClient(OutputSurfaceClient* client) override;
   void EnsureBackbuffer() override;
   void DiscardBackbuffer() override;
+  void BindFramebuffer() override;
   void Reshape(const ReshapeParams& params) override;
   void SwapBuffers(OutputSurfaceFrame frame) override;
   void ScheduleOutputSurfaceAsOverlay(
       OverlayProcessorInterface::OutputSurfaceOverlayPlane output_surface_plane)
       override;
+  uint32_t GetFramebufferCopyTextureFormat() override;
   bool IsDisplayedAsOverlayPlane() const override;
+  unsigned GetOverlayTextureId() const override;
+  bool HasExternalStencilTest() const override;
+  void ApplyExternalStencil() override;
+  unsigned UpdateGpuFence() override;
   void SetNeedsSwapSizeNotifications(
       bool needs_swap_size_notifications) override;
   void SetUpdateVSyncParametersCallback(
diff --git third_party/blink/renderer/platform/widget/compositing/android_webview/synchronous_layer_tree_frame_sink.cc third_party/blink/renderer/platform/widget/compositing/android_webview/synchronous_layer_tree_frame_sink.cc
index b64ce7042938e..4eb245ec83e33 100644
--- third_party/blink/renderer/platform/widget/compositing/android_webview/synchronous_layer_tree_frame_sink.cc
+++ third_party/blink/renderer/platform/widget/compositing/android_webview/synchronous_layer_tree_frame_sink.cc
@@ -108,9 +108,15 @@ class SynchronousLayerTreeFrameSink::SoftwareOutputSurface
   void BindToClient(viz::OutputSurfaceClient* client) override {}
   void EnsureBackbuffer() override {}
   void DiscardBackbuffer() override {}
+  void BindFramebuffer() override {}
   void SwapBuffers(viz::OutputSurfaceFrame frame) override {}
   void Reshape(const ReshapeParams& params) override {}
+  uint32_t GetFramebufferCopyTextureFormat() override { return 0; }
   bool IsDisplayedAsOverlayPlane() const override { return false; }
+  unsigned GetOverlayTextureId() const override { return 0; }
+  bool HasExternalStencilTest() const override { return false; }
+  void ApplyExternalStencil() override {}
+  unsigned UpdateGpuFence() override { return 0; }
   void SetUpdateVSyncParametersCallback(
       viz::UpdateVSyncParametersCallback callback) override {}
   void SetDisplayTransformHint(gfx::OverlayTransform transform) override {}
-- 
2.36.1.windows.1

